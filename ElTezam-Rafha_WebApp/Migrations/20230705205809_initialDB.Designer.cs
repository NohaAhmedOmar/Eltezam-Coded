// <auto-generated />
using System;
using ElTezam_Coded_WebApp.DomainModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElTezam_Coded_WebApp.Migrations
{
    [DbContext(typeof(CodedContext))]
    [Migration("20230705205809_initialDB")]
    partial class initialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.Code", b =>
                {
                    b.Property<string>("Code1")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Code");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Code1");

                    b.HasIndex("CategoryId");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.CodeCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("CodeCategory", (string)null);
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<int?>("ActualJobNameCode")
                        .HasColumnType("int");

                    b.Property<string>("ActualJobNameDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ActualOrganizationId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ActualOrganizationID");

                    b.Property<string>("ActualOrganizationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("BasicSalary")
                        .HasColumnType("float");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("BloodType")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("EmployeeStatusCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("EmploymentTypeCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("EmploymentTypeDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FirstGradeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime?>("GovernmentHireDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Healthstatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobCatChain")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int>("JobClassCode")
                        .HasColumnType("int");

                    b.Property<string>("JobClassDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("JobNameCode")
                        .HasColumnType("int");

                    b.Property<string>("JobNameDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("JobNumber")
                        .HasColumnType("int");

                    b.Property<string>("JobOrganizationId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("JobOrganizationID");

                    b.Property<string>("JobOrganizationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LocationCode")
                        .HasColumnType("int");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("MinistryHireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Mobile")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("NationalityCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("NextPromotionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RankCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("Religion")
                        .HasColumnType("int");

                    b.Property<double?>("RemainingAnnualBalance")
                        .HasColumnType("float");

                    b.Property<double?>("RemainingBusinessBalance")
                        .HasColumnType("float");

                    b.Property<string>("SecondNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StepDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StepId")
                        .HasColumnType("int")
                        .HasColumnName("StepID");

                    b.Property<DateTime>("TerminationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TerminationReasonCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("ThirdNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ThirdNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TransactionCode")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("BloodType");

                    b.HasIndex("Gender");

                    b.HasIndex("Healthstatus");

                    b.HasIndex("MaritalStatus");

                    b.HasIndex("Religion");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.EmployeeAppraisalInfo", b =>
                {
                    b.Property<int>("AppraisalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AppraisalID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppraisalId"), 1L, 1);

                    b.Property<string>("AppraisalTypeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RatingCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AppraisalId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAppraisalInfo", (string)null);
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.EmployeeJob", b =>
                {
                    b.Property<int>("EmployeeJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeJobId"), 1L, 1);

                    b.Property<double?>("BasicSalary")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DecisionNumber")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionType")
                        .HasColumnType("text");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmploymentTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("EmploymentTypeDescription")
                        .HasColumnType("text");

                    b.Property<DateTime?>("GradeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IqamaNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("JobCatChain")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("JobClassCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("JobClassDescription")
                        .HasColumnType("text");

                    b.Property<string>("JobNameCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("JobNameDescription")
                        .HasColumnType("text");

                    b.Property<int>("JobNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("date");

                    b.Property<string>("LocationCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("NationalID");

                    b.Property<string>("RankCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("StepDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StepId")
                        .HasColumnType("int")
                        .HasColumnName("StepID");

                    b.Property<int?>("SubAgencyId")
                        .HasColumnType("int")
                        .HasColumnName("SubAgencyID");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionDescription")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TransactionEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TransactionStartDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmployeeJobId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmploymentTypeCode");

                    b.HasIndex("JobNameCode");

                    b.HasIndex("RankCode");

                    b.ToTable("EmployeeJobs");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.EmployeePayment", b =>
                {
                    b.Property<int>("EmployeePayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeePayId"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ConsolidationSetDescription")
                        .HasColumnType("text");

                    b.Property<int>("ConsolidationSetId")
                        .HasColumnType("int")
                        .HasColumnName("ConsolidationSetID");

                    b.Property<string>("ElementClassification")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ElementCode")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmploymentTypeCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("GregorianMonth")
                        .HasColumnType("int");

                    b.Property<int>("GregorianYear")
                        .HasColumnType("int");

                    b.Property<int>("HijriMonth")
                        .HasColumnType("int");

                    b.Property<int>("HijriYear")
                        .HasColumnType("int");

                    b.Property<string>("IqamaNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NationalId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("NationalID");

                    b.Property<double>("NetPay")
                        .HasColumnType("float");

                    b.Property<string>("PaidDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RankCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("StepId")
                        .HasColumnType("int")
                        .HasColumnName("StepID");

                    b.Property<int?>("SubAgencyId")
                        .HasColumnType("int")
                        .HasColumnName("SubAgencyID");

                    b.HasKey("EmployeePayId");

                    b.HasIndex("ConsolidationSetId");

                    b.HasIndex("ElementCode");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmploymentTypeCode");

                    b.HasIndex("RankCode");

                    b.ToTable("EmployeePayments");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.EmployeeQualification", b =>
                {
                    b.Property<int>("QualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QualificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QualificationId"), 1L, 1);

                    b.Property<string>("CityName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("GraduationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MajorCode")
                        .HasColumnType("int");

                    b.Property<int>("QualificationCode")
                        .HasColumnType("int");

                    b.Property<string>("QualificationStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<double?>("ScoreOutOf")
                        .HasColumnType("float");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UniversityCode")
                        .HasColumnType("int");

                    b.HasKey("QualificationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MajorCode");

                    b.HasIndex("QualificationCode");

                    b.HasIndex("UniversityCode");

                    b.ToTable("EmployeeQualifications");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.EmployeeVacation", b =>
                {
                    b.Property<int>("VacationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VacationId"), 1L, 1);

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DecisionNumber")
                        .HasColumnType("int");

                    b.Property<int>("EmpoyeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("VacationCode")
                        .HasColumnType("int");

                    b.HasKey("VacationId");

                    b.HasIndex("EmpoyeeId");

                    b.HasIndex("VacationCode");

                    b.ToTable("EmployeeVacations");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.Enum", b =>
                {
                    b.Property<int>("EnumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnumId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("EnumValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnumId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Enums");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.EnumsCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("EnumsCategory", (string)null);
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.Governorate", b =>
                {
                    b.Property<int>("GovernorateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GovernorateId"), 1L, 1);

                    b.Property<string>("GovernorateName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("GovernorateId");

                    b.ToTable("Governorates");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NationalityId"), 1L, 1);

                    b.Property<string>("NationalityCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("NationalityDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("NationalityId");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.SubCity", b =>
                {
                    b.Property<int>("SubCityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCityId"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("SubCityName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("SubCityId");

                    b.HasIndex("CityId");

                    b.ToTable("SubCities");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.University", b =>
                {
                    b.Property<int>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniversityId"), 1L, 1);

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("UniversityId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.City", b =>
                {
                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Governorate", "Governorate")
                        .WithMany("Cities")
                        .HasForeignKey("GovernorateId")
                        .IsRequired()
                        .HasConstraintName("FK_Cities_Governorates");

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.Code", b =>
                {
                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.CodeCategory", "Category")
                        .WithMany("Codes")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Codes_CodeCategory");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.Employee", b =>
                {
                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Enum", "BloodTypeNavigation")
                        .WithMany("EmployeeBloodTypeNavigations")
                        .HasForeignKey("BloodType")
                        .HasConstraintName("FK_Employees_Enums2");

                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Enum", "GenderNavigation")
                        .WithMany("EmployeeGenderNavigations")
                        .HasForeignKey("Gender")
                        .IsRequired()
                        .HasConstraintName("FK_Employees_Enums");

                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Enum", "HealthstatusNavigation")
                        .WithMany("EmployeeHealthstatusNavigations")
                        .HasForeignKey("Healthstatus")
                        .IsRequired()
                        .HasConstraintName("FK_Employees_Enums4");

                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Enum", "MaritalStatusNavigation")
                        .WithMany("EmployeeMaritalStatusNavigations")
                        .HasForeignKey("MaritalStatus")
                        .IsRequired()
                        .HasConstraintName("FK_Employees_Enums3");

                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Enum", "ReligionNavigation")
                        .WithMany("EmployeeReligionNavigations")
                        .HasForeignKey("Religion")
                        .IsRequired()
                        .HasConstraintName("FK_Employees_Enums1");

                    b.Navigation("BloodTypeNavigation");

                    b.Navigation("GenderNavigation");

                    b.Navigation("HealthstatusNavigation");

                    b.Navigation("MaritalStatusNavigation");

                    b.Navigation("ReligionNavigation");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.EmployeeAppraisalInfo", b =>
                {
                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Employee", "Employee")
                        .WithMany("EmployeeAppraisalInfos")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeAppraisalInfo_Employees");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.EmployeeJob", b =>
                {
                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Employee", "Employee")
                        .WithMany("EmployeeJobs")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeJob_Employees");

                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Code", "EmploymentTypeCodeNavigation")
                        .WithMany("EmployeeJobEmploymentTypeCodeNavigations")
                        .HasForeignKey("EmploymentTypeCode")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeJob_Codes1");

                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Code", "JobNameCodeNavigation")
                        .WithMany("EmployeeJobJobNameCodeNavigations")
                        .HasForeignKey("JobNameCode")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeJob_Codes");

                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Code", "RankCodeNavigation")
                        .WithMany("EmployeeJobRankCodeNavigations")
                        .HasForeignKey("RankCode")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeJob_Codes2");

                    b.Navigation("Employee");

                    b.Navigation("EmploymentTypeCodeNavigation");

                    b.Navigation("JobNameCodeNavigation");

                    b.Navigation("RankCodeNavigation");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.EmployeePayment", b =>
                {
                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Enum", "ConsolidationSet")
                        .WithMany("EmployeePaymentConsolidationSets")
                        .HasForeignKey("ConsolidationSetId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeePayments_Enums");

                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Enum", "ElementCodeNavigation")
                        .WithMany("EmployeePaymentElementCodeNavigations")
                        .HasForeignKey("ElementCode")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeePayments_Enums1");

                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Employee", "Employee")
                        .WithMany("EmployeePayments")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeePayments_Employees");

                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Code", "EmploymentTypeCodeNavigation")
                        .WithMany("EmployeePaymentEmploymentTypeCodeNavigations")
                        .HasForeignKey("EmploymentTypeCode")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeePayments_Codes");

                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Code", "RankCodeNavigation")
                        .WithMany("EmployeePaymentRankCodeNavigations")
                        .HasForeignKey("RankCode")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeePayments_Codes1");

                    b.Navigation("ConsolidationSet");

                    b.Navigation("ElementCodeNavigation");

                    b.Navigation("Employee");

                    b.Navigation("EmploymentTypeCodeNavigation");

                    b.Navigation("RankCodeNavigation");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.EmployeeQualification", b =>
                {
                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Employee", "Employee")
                        .WithMany("EmployeeQualifications")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeQualifications_Employees");

                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Enum", "MajorCodeNavigation")
                        .WithMany("EmployeeQualificationMajorCodeNavigations")
                        .HasForeignKey("MajorCode")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeQualifications_Enums1");

                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Enum", "QualificationCodeNavigation")
                        .WithMany("EmployeeQualificationQualificationCodeNavigations")
                        .HasForeignKey("QualificationCode")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeQualifications_Enums");

                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.University", "UniversityCodeNavigation")
                        .WithMany("EmployeeQualifications")
                        .HasForeignKey("UniversityCode")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeQualifications_Universities");

                    b.Navigation("Employee");

                    b.Navigation("MajorCodeNavigation");

                    b.Navigation("QualificationCodeNavigation");

                    b.Navigation("UniversityCodeNavigation");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.EmployeeVacation", b =>
                {
                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Employee", "Empoyee")
                        .WithMany("EmployeeVacations")
                        .HasForeignKey("EmpoyeeId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeVacations_Employees");

                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.Enum", "VacationCodeNavigation")
                        .WithMany("EmployeeVacations")
                        .HasForeignKey("VacationCode")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeVacations_Enums");

                    b.Navigation("Empoyee");

                    b.Navigation("VacationCodeNavigation");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.Enum", b =>
                {
                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.EnumsCategory", "Category")
                        .WithMany("Enums")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Enums_EnumsCategory");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.SubCity", b =>
                {
                    b.HasOne("ElTezam_Coded_WebApp.DomainModels.City", "City")
                        .WithMany("SubCities")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_SubCities_Cities");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.City", b =>
                {
                    b.Navigation("SubCities");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.Code", b =>
                {
                    b.Navigation("EmployeeJobEmploymentTypeCodeNavigations");

                    b.Navigation("EmployeeJobJobNameCodeNavigations");

                    b.Navigation("EmployeeJobRankCodeNavigations");

                    b.Navigation("EmployeePaymentEmploymentTypeCodeNavigations");

                    b.Navigation("EmployeePaymentRankCodeNavigations");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.CodeCategory", b =>
                {
                    b.Navigation("Codes");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.Employee", b =>
                {
                    b.Navigation("EmployeeAppraisalInfos");

                    b.Navigation("EmployeeJobs");

                    b.Navigation("EmployeePayments");

                    b.Navigation("EmployeeQualifications");

                    b.Navigation("EmployeeVacations");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.Enum", b =>
                {
                    b.Navigation("EmployeeBloodTypeNavigations");

                    b.Navigation("EmployeeGenderNavigations");

                    b.Navigation("EmployeeHealthstatusNavigations");

                    b.Navigation("EmployeeMaritalStatusNavigations");

                    b.Navigation("EmployeePaymentConsolidationSets");

                    b.Navigation("EmployeePaymentElementCodeNavigations");

                    b.Navigation("EmployeeQualificationMajorCodeNavigations");

                    b.Navigation("EmployeeQualificationQualificationCodeNavigations");

                    b.Navigation("EmployeeReligionNavigations");

                    b.Navigation("EmployeeVacations");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.EnumsCategory", b =>
                {
                    b.Navigation("Enums");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.Governorate", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ElTezam_Coded_WebApp.DomainModels.University", b =>
                {
                    b.Navigation("EmployeeQualifications");
                });
#pragma warning restore 612, 618
        }
    }
}
